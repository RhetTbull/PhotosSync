// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Photos Library API (photoslibrary/v1)
// Description:
//   Manage photos, videos, and albums in Google Photos
// Documentation:
//   https://developers.google.com/photos/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRPhotosLibrary_AddEnrichmentToAlbumRequest;
@class GTLRPhotosLibrary_BatchCreateMediaItemsRequest;
@class GTLRPhotosLibrary_CreateAlbumRequest;
@class GTLRPhotosLibrary_JoinSharedAlbumRequest;
@class GTLRPhotosLibrary_LeaveSharedAlbumRequest;
@class GTLRPhotosLibrary_SearchMediaItemsRequest;
@class GTLRPhotosLibrary_ShareAlbumRequest;
@class GTLRPhotosLibrary_UnshareAlbumRequest;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Photos Library query classes.
 */
@interface GTLRPhotosLibraryQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Adds an enrichment at a specified position in a defined album.
 *
 *  Method: photoslibrary.albums.addEnrichment
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePhotosLibrary
 *    @c kGTLRAuthScopePhotosLibraryAppendonly
 *    @c kGTLRAuthScopePhotosLibrarySharing
 */
@interface GTLRPhotosLibraryQuery_AlbumsAddEnrichment : GTLRPhotosLibraryQuery
// Previous library name was
//   +[GTLQueryPhotosLibrary queryForAlbumsAddEnrichmentWithObject:albumId:]

/** Identifier of the album where the enrichment is to be added. */
@property(nonatomic, copy, nullable) NSString *albumId;

/**
 *  Fetches a @c GTLRPhotosLibrary_AddEnrichmentToAlbumResponse.
 *
 *  Adds an enrichment at a specified position in a defined album.
 *
 *  @param object The @c GTLRPhotosLibrary_AddEnrichmentToAlbumRequest to
 *    include in the query.
 *  @param albumId Identifier of the album where the enrichment is to be added.
 *
 *  @return GTLRPhotosLibraryQuery_AlbumsAddEnrichment
 */
+ (instancetype)queryWithObject:(GTLRPhotosLibrary_AddEnrichmentToAlbumRequest *)object
                        albumId:(NSString *)albumId;

@end

/**
 *  Creates an album in a user's Google Photos library.
 *
 *  Method: photoslibrary.albums.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePhotosLibrary
 *    @c kGTLRAuthScopePhotosLibraryAppendonly
 *    @c kGTLRAuthScopePhotosLibrarySharing
 */
@interface GTLRPhotosLibraryQuery_AlbumsCreate : GTLRPhotosLibraryQuery
// Previous library name was
//   +[GTLQueryPhotosLibrary queryForAlbumsCreateWithObject:]

/**
 *  Fetches a @c GTLRPhotosLibrary_Album.
 *
 *  Creates an album in a user's Google Photos library.
 *
 *  @param object The @c GTLRPhotosLibrary_CreateAlbumRequest to include in the
 *    query.
 *
 *  @return GTLRPhotosLibraryQuery_AlbumsCreate
 */
+ (instancetype)queryWithObject:(GTLRPhotosLibrary_CreateAlbumRequest *)object;

@end

/**
 *  Returns the album based on the specified `albumId`.
 *  The `albumId` must be the ID of an album owned by the user or a shared
 *  album that the user has joined.
 *
 *  Method: photoslibrary.albums.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePhotosLibrary
 *    @c kGTLRAuthScopePhotosLibraryReadonly
 *    @c kGTLRAuthScopePhotosLibraryReadonlyAppcreateddata
 */
@interface GTLRPhotosLibraryQuery_AlbumsGet : GTLRPhotosLibraryQuery
// Previous library name was
//   +[GTLQueryPhotosLibrary queryForAlbumsGetWithalbumId:]

/** Identifier of the album to be requested. */
@property(nonatomic, copy, nullable) NSString *albumId;

/**
 *  Fetches a @c GTLRPhotosLibrary_Album.
 *
 *  Returns the album based on the specified `albumId`.
 *  The `albumId` must be the ID of an album owned by the user or a shared
 *  album that the user has joined.
 *
 *  @param albumId Identifier of the album to be requested.
 *
 *  @return GTLRPhotosLibraryQuery_AlbumsGet
 */
+ (instancetype)queryWithAlbumId:(NSString *)albumId;

@end

/**
 *  Lists all albums shown to a user in the Albums tab of the Google
 *  Photos app.
 *
 *  Method: photoslibrary.albums.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePhotosLibrary
 *    @c kGTLRAuthScopePhotosLibraryReadonly
 *    @c kGTLRAuthScopePhotosLibraryReadonlyAppcreateddata
 */
@interface GTLRPhotosLibraryQuery_AlbumsList : GTLRPhotosLibraryQuery
// Previous library name was
//   +[GTLQueryPhotosLibrary queryForAlbumsList]

/**
 *  If set, the results exclude media items that were not created by this app.
 *  Defaults to false (all albums are returned). This field is ignored if the
 *  photoslibrary.readonly.appcreateddata scope is used.
 */
@property(nonatomic, assign) BOOL excludeNonAppCreatedData;

/**
 *  Maximum number of albums to return in the response. The default number of
 *  albums to return at a time is 20. The maximum `pageSize` is 50.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A continuation token to get the next page of the results. Adding this to
 *  the request returns the rows after the `pageToken`. The `pageToken` should
 *  be the value returned in the `nextPageToken` parameter in the response to
 *  the `listAlbums` request.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRPhotosLibrary_ListAlbumsResponse.
 *
 *  Lists all albums shown to a user in the Albums tab of the Google
 *  Photos app.
 *
 *  @return GTLRPhotosLibraryQuery_AlbumsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Marks an album as shared and accessible to other users. This action can
 *  only be performed on albums which were created by the developer via the
 *  API.
 *
 *  Method: photoslibrary.albums.share
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePhotosLibrarySharing
 */
@interface GTLRPhotosLibraryQuery_AlbumsShare : GTLRPhotosLibraryQuery
// Previous library name was
//   +[GTLQueryPhotosLibrary queryForAlbumsShareWithObject:albumId:]

/**
 *  Identifier of the album to be shared. This `albumId` must belong to an
 *  album created by the developer.
 */
@property(nonatomic, copy, nullable) NSString *albumId;

/**
 *  Fetches a @c GTLRPhotosLibrary_ShareAlbumResponse.
 *
 *  Marks an album as shared and accessible to other users. This action can
 *  only be performed on albums which were created by the developer via the
 *  API.
 *
 *  @param object The @c GTLRPhotosLibrary_ShareAlbumRequest to include in the
 *    query.
 *  @param albumId Identifier of the album to be shared. This `albumId` must
 *    belong to an
 *    album created by the developer.
 *
 *  @return GTLRPhotosLibraryQuery_AlbumsShare
 */
+ (instancetype)queryWithObject:(GTLRPhotosLibrary_ShareAlbumRequest *)object
                        albumId:(NSString *)albumId;

@end

/**
 *  Marks a previously shared album as private. This means that the album is
 *  no longer shared and all the non-owners will lose access to the album. All
 *  non-owner content will be removed from the album. If a non-owner has
 *  previously added the album to their library, they will retain all photos in
 *  their library. This action can only be performed on albums which were
 *  created by the developer via the API.
 *
 *  Method: photoslibrary.albums.unshare
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePhotosLibrarySharing
 */
@interface GTLRPhotosLibraryQuery_AlbumsUnshare : GTLRPhotosLibraryQuery
// Previous library name was
//   +[GTLQueryPhotosLibrary queryForAlbumsUnshareWithObject:albumId:]

/**
 *  Identifier of the album to be unshared. This album id must belong to an
 *  album created by the developer.
 */
@property(nonatomic, copy, nullable) NSString *albumId;

/**
 *  Fetches a @c GTLRPhotosLibrary_UnshareAlbumResponse.
 *
 *  Marks a previously shared album as private. This means that the album is
 *  no longer shared and all the non-owners will lose access to the album. All
 *  non-owner content will be removed from the album. If a non-owner has
 *  previously added the album to their library, they will retain all photos in
 *  their library. This action can only be performed on albums which were
 *  created by the developer via the API.
 *
 *  @param object The @c GTLRPhotosLibrary_UnshareAlbumRequest to include in the
 *    query.
 *  @param albumId Identifier of the album to be unshared. This album id must
 *    belong to an
 *    album created by the developer.
 *
 *  @return GTLRPhotosLibraryQuery_AlbumsUnshare
 */
+ (instancetype)queryWithObject:(GTLRPhotosLibrary_UnshareAlbumRequest *)object
                        albumId:(NSString *)albumId;

@end

/**
 *  Creates one or more media items in a user's Google Photos library.
 *  This is the second step for creating a media item. For details regarding
 *  Step 1, uploading the raw bytes to a Google Server, see
 *  <a href="/photos/library/guides/upload-media">Uploading media</a>.
 *  This call adds the media item to the library. If an album `id` is
 *  specified, the call adds the media item to the album too. By default, the
 *  media item will be added to the end of the library or album.
 *  If an album `id` and position are both defined, the media item is
 *  added to the album at the specified position.
 *  If the call contains multiple media items, they're added at the specified
 *  position.
 *  If you are creating a media item in a shared album where you are not the
 *  owner, you are not allowed to position the media item. Doing so will result
 *  in a `BAD REQUEST` error.
 *
 *  Method: photoslibrary.mediaItems.batchCreate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePhotosLibrary
 *    @c kGTLRAuthScopePhotosLibraryAppendonly
 *    @c kGTLRAuthScopePhotosLibrarySharing
 */
@interface GTLRPhotosLibraryQuery_MediaItemsBatchCreate : GTLRPhotosLibraryQuery
// Previous library name was
//   +[GTLQueryPhotosLibrary queryForMediaItemsBatchCreateWithObject:]

/**
 *  Fetches a @c GTLRPhotosLibrary_BatchCreateMediaItemsResponse.
 *
 *  Creates one or more media items in a user's Google Photos library.
 *  This is the second step for creating a media item. For details regarding
 *  Step 1, uploading the raw bytes to a Google Server, see
 *  <a href="/photos/library/guides/upload-media">Uploading media</a>.
 *  This call adds the media item to the library. If an album `id` is
 *  specified, the call adds the media item to the album too. By default, the
 *  media item will be added to the end of the library or album.
 *  If an album `id` and position are both defined, the media item is
 *  added to the album at the specified position.
 *  If the call contains multiple media items, they're added at the specified
 *  position.
 *  If you are creating a media item in a shared album where you are not the
 *  owner, you are not allowed to position the media item. Doing so will result
 *  in a `BAD REQUEST` error.
 *
 *  @param object The @c GTLRPhotosLibrary_BatchCreateMediaItemsRequest to
 *    include in the query.
 *
 *  @return GTLRPhotosLibraryQuery_MediaItemsBatchCreate
 */
+ (instancetype)queryWithObject:(GTLRPhotosLibrary_BatchCreateMediaItemsRequest *)object;

@end

/**
 *  Returns the list of media items for the specified media item identifiers.
 *  Items are returned in the same order as the supplied identifiers.
 *
 *  Method: photoslibrary.mediaItems.batchGet
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePhotosLibrary
 *    @c kGTLRAuthScopePhotosLibraryReadonly
 *    @c kGTLRAuthScopePhotosLibraryReadonlyAppcreateddata
 */
@interface GTLRPhotosLibraryQuery_MediaItemsBatchGet : GTLRPhotosLibraryQuery
// Previous library name was
//   +[GTLQueryPhotosLibrary queryForMediaItemsBatchGet]

/**
 *  Identifiers of the media items to be requested.
 *  Must not contain repeated identifiers and cannot be empty. The maximum
 *  number of media items that can be retrieved in one call is 50.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *mediaItemIds;

/**
 *  Fetches a @c GTLRPhotosLibrary_BatchGetMediaItemsResponse.
 *
 *  Returns the list of media items for the specified media item identifiers.
 *  Items are returned in the same order as the supplied identifiers.
 *
 *  @return GTLRPhotosLibraryQuery_MediaItemsBatchGet
 */
+ (instancetype)query;

@end

/**
 *  Returns the media item for the specified media item identifier.
 *
 *  Method: photoslibrary.mediaItems.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePhotosLibrary
 *    @c kGTLRAuthScopePhotosLibraryReadonly
 *    @c kGTLRAuthScopePhotosLibraryReadonlyAppcreateddata
 */
@interface GTLRPhotosLibraryQuery_MediaItemsGet : GTLRPhotosLibraryQuery
// Previous library name was
//   +[GTLQueryPhotosLibrary queryForMediaItemsGetWithmediaItemId:]

/** Identifier of the media item to be requested. */
@property(nonatomic, copy, nullable) NSString *mediaItemId;

/**
 *  Fetches a @c GTLRPhotosLibrary_MediaItem.
 *
 *  Returns the media item for the specified media item identifier.
 *
 *  @param mediaItemId Identifier of the media item to be requested.
 *
 *  @return GTLRPhotosLibraryQuery_MediaItemsGet
 */
+ (instancetype)queryWithMediaItemId:(NSString *)mediaItemId;

@end

/**
 *  List all media items from a user's Google Photos library.
 *
 *  Method: photoslibrary.mediaItems.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePhotosLibrary
 *    @c kGTLRAuthScopePhotosLibraryReadonly
 *    @c kGTLRAuthScopePhotosLibraryReadonlyAppcreateddata
 */
@interface GTLRPhotosLibraryQuery_MediaItemsList : GTLRPhotosLibraryQuery
// Previous library name was
//   +[GTLQueryPhotosLibrary queryForMediaItemsList]

/**
 *  Maximum number of media items to return in the response. The default number
 *  of media items to return at a time is 25. The maximum `pageSize` is 100.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A continuation token to get the next page of the results. Adding this to
 *  the request returns the rows after the `pageToken`. The `pageToken` should
 *  be the value returned in the `nextPageToken` parameter in the response to
 *  the `listMediaItems` request.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRPhotosLibrary_ListMediaItemsResponse.
 *
 *  List all media items from a user's Google Photos library.
 *
 *  @return GTLRPhotosLibraryQuery_MediaItemsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Searches for media items in a user's Google Photos library.
 *  If no filters are set, then all media items in the user's library are
 *  returned.
 *  If an album is set, all media items in the specified album are returned.
 *  If filters are specified, media items that match the filters from the
 *  user's library are listed. If you set both the album and the filters, the
 *  request results in an error.
 *
 *  Method: photoslibrary.mediaItems.search
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePhotosLibrary
 *    @c kGTLRAuthScopePhotosLibraryReadonly
 *    @c kGTLRAuthScopePhotosLibraryReadonlyAppcreateddata
 */
@interface GTLRPhotosLibraryQuery_MediaItemsSearch : GTLRPhotosLibraryQuery
// Previous library name was
//   +[GTLQueryPhotosLibrary queryForMediaItemsSearchWithObject:]

/**
 *  Fetches a @c GTLRPhotosLibrary_SearchMediaItemsResponse.
 *
 *  Searches for media items in a user's Google Photos library.
 *  If no filters are set, then all media items in the user's library are
 *  returned.
 *  If an album is set, all media items in the specified album are returned.
 *  If filters are specified, media items that match the filters from the
 *  user's library are listed. If you set both the album and the filters, the
 *  request results in an error.
 *
 *  @param object The @c GTLRPhotosLibrary_SearchMediaItemsRequest to include in
 *    the query.
 *
 *  @return GTLRPhotosLibraryQuery_MediaItemsSearch
 */
+ (instancetype)queryWithObject:(GTLRPhotosLibrary_SearchMediaItemsRequest *)object;

@end

/**
 *  Returns the album based on the specified `shareToken`.
 *
 *  Method: photoslibrary.sharedAlbums.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePhotosLibrarySharing
 */
@interface GTLRPhotosLibraryQuery_SharedAlbumsGet : GTLRPhotosLibraryQuery
// Previous library name was
//   +[GTLQueryPhotosLibrary queryForSharedAlbumsGetWithshareToken:]

/** Share token of the album to be requested. */
@property(nonatomic, copy, nullable) NSString *shareToken;

/**
 *  Fetches a @c GTLRPhotosLibrary_Album.
 *
 *  Returns the album based on the specified `shareToken`.
 *
 *  @param shareToken Share token of the album to be requested.
 *
 *  @return GTLRPhotosLibraryQuery_SharedAlbumsGet
 */
+ (instancetype)queryWithShareToken:(NSString *)shareToken;

@end

/**
 *  Joins a shared album on behalf of the Google Photos user.
 *
 *  Method: photoslibrary.sharedAlbums.join
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePhotosLibrarySharing
 */
@interface GTLRPhotosLibraryQuery_SharedAlbumsJoin : GTLRPhotosLibraryQuery
// Previous library name was
//   +[GTLQueryPhotosLibrary queryForSharedAlbumsJoinWithObject:]

/**
 *  Fetches a @c GTLRPhotosLibrary_JoinSharedAlbumResponse.
 *
 *  Joins a shared album on behalf of the Google Photos user.
 *
 *  @param object The @c GTLRPhotosLibrary_JoinSharedAlbumRequest to include in
 *    the query.
 *
 *  @return GTLRPhotosLibraryQuery_SharedAlbumsJoin
 */
+ (instancetype)queryWithObject:(GTLRPhotosLibrary_JoinSharedAlbumRequest *)object;

@end

/**
 *  Leaves a previously-joined shared album on behalf of the Google Photos
 *  user. The user must not own this album.
 *
 *  Method: photoslibrary.sharedAlbums.leave
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePhotosLibrarySharing
 */
@interface GTLRPhotosLibraryQuery_SharedAlbumsLeave : GTLRPhotosLibraryQuery
// Previous library name was
//   +[GTLQueryPhotosLibrary queryForSharedAlbumsLeaveWithObject:]

/**
 *  Fetches a @c GTLRPhotosLibrary_LeaveSharedAlbumResponse.
 *
 *  Leaves a previously-joined shared album on behalf of the Google Photos
 *  user. The user must not own this album.
 *
 *  @param object The @c GTLRPhotosLibrary_LeaveSharedAlbumRequest to include in
 *    the query.
 *
 *  @return GTLRPhotosLibraryQuery_SharedAlbumsLeave
 */
+ (instancetype)queryWithObject:(GTLRPhotosLibrary_LeaveSharedAlbumRequest *)object;

@end

/**
 *  Lists all shared albums available in the Sharing tab of the
 *  user's Google Photos app.
 *
 *  Method: photoslibrary.sharedAlbums.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePhotosLibrary
 *    @c kGTLRAuthScopePhotosLibraryReadonly
 *    @c kGTLRAuthScopePhotosLibraryReadonlyAppcreateddata
 */
@interface GTLRPhotosLibraryQuery_SharedAlbumsList : GTLRPhotosLibraryQuery
// Previous library name was
//   +[GTLQueryPhotosLibrary queryForSharedAlbumsList]

/**
 *  If set, the results exclude media items that were not created by this app.
 *  Defaults to false (all albums are returned). This field is ignored if the
 *  photoslibrary.readonly.appcreateddata scope is used.
 */
@property(nonatomic, assign) BOOL excludeNonAppCreatedData;

/**
 *  Maximum number of albums to return in the response. The default number of
 *  albums to return at a time is 20. The maximum `pageSize` is 50.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A continuation token to get the next page of the results. Adding this to
 *  the request returns the rows after the `pageToken`. The `pageToken` should
 *  be the value returned in the `nextPageToken` parameter in the response to
 *  the `listSharedAlbums` request.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRPhotosLibrary_ListSharedAlbumsResponse.
 *
 *  Lists all shared albums available in the Sharing tab of the
 *  user's Google Photos app.
 *
 *  @return GTLRPhotosLibraryQuery_SharedAlbumsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
