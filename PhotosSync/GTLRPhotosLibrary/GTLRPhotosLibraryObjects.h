// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Photos Library API (photoslibrary/v1)
// Description:
//   Manage photos, videos, and albums in Google Photos
// Documentation:
//   https://developers.google.com/photos/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRPhotosLibrary_Album;
@class GTLRPhotosLibrary_AlbumPosition;
@class GTLRPhotosLibrary_ContentFilter;
@class GTLRPhotosLibrary_ContributorInfo;
@class GTLRPhotosLibrary_Date;
@class GTLRPhotosLibrary_DateFilter;
@class GTLRPhotosLibrary_DateRange;
@class GTLRPhotosLibrary_EnrichmentItem;
@class GTLRPhotosLibrary_Filters;
@class GTLRPhotosLibrary_LatLng;
@class GTLRPhotosLibrary_Location;
@class GTLRPhotosLibrary_LocationEnrichment;
@class GTLRPhotosLibrary_MapEnrichment;
@class GTLRPhotosLibrary_MediaItem;
@class GTLRPhotosLibrary_MediaItemResult;
@class GTLRPhotosLibrary_MediaMetadata;
@class GTLRPhotosLibrary_MediaTypeFilter;
@class GTLRPhotosLibrary_NewEnrichmentItem;
@class GTLRPhotosLibrary_NewMediaItem;
@class GTLRPhotosLibrary_NewMediaItemResult;
@class GTLRPhotosLibrary_Photo;
@class GTLRPhotosLibrary_SharedAlbumOptions;
@class GTLRPhotosLibrary_ShareInfo;
@class GTLRPhotosLibrary_SimpleMediaItem;
@class GTLRPhotosLibrary_Status;
@class GTLRPhotosLibrary_Status_Details_Item;
@class GTLRPhotosLibrary_TextEnrichment;
@class GTLRPhotosLibrary_Video;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRPhotosLibrary_AlbumPosition.position

/**
 *  After an enrichment item.
 *
 *  Value: "AFTER_ENRICHMENT_ITEM"
 */
GTLR_EXTERN NSString * const kGTLRPhotosLibrary_AlbumPosition_Position_AfterEnrichmentItem;
/**
 *  After a media item.
 *
 *  Value: "AFTER_MEDIA_ITEM"
 */
GTLR_EXTERN NSString * const kGTLRPhotosLibrary_AlbumPosition_Position_AfterMediaItem;
/**
 *  At the beginning of the album.
 *
 *  Value: "FIRST_IN_ALBUM"
 */
GTLR_EXTERN NSString * const kGTLRPhotosLibrary_AlbumPosition_Position_FirstInAlbum;
/**
 *  At the end of the album.
 *
 *  Value: "LAST_IN_ALBUM"
 */
GTLR_EXTERN NSString * const kGTLRPhotosLibrary_AlbumPosition_Position_LastInAlbum;
/**
 *  Default value if this enum isn't set.
 *
 *  Value: "POSITION_TYPE_UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRPhotosLibrary_AlbumPosition_Position_PositionTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRPhotosLibrary_ContentFilter.excludedContentCategories

/** Value: "ANIMALS" */
GTLR_EXTERN NSString * const kGTLRPhotosLibrary_ContentFilter_ExcludedContentCategories_Animals;
/** Value: "BIRTHDAYS" */
GTLR_EXTERN NSString * const kGTLRPhotosLibrary_ContentFilter_ExcludedContentCategories_Birthdays;
/** Value: "CITYSCAPES" */
GTLR_EXTERN NSString * const kGTLRPhotosLibrary_ContentFilter_ExcludedContentCategories_Cityscapes;
/** Value: "DOCUMENTS" */
GTLR_EXTERN NSString * const kGTLRPhotosLibrary_ContentFilter_ExcludedContentCategories_Documents;
/** Value: "FOOD" */
GTLR_EXTERN NSString * const kGTLRPhotosLibrary_ContentFilter_ExcludedContentCategories_Food;
/** Value: "LANDMARKS" */
GTLR_EXTERN NSString * const kGTLRPhotosLibrary_ContentFilter_ExcludedContentCategories_Landmarks;
/** Value: "LANDSCAPES" */
GTLR_EXTERN NSString * const kGTLRPhotosLibrary_ContentFilter_ExcludedContentCategories_Landscapes;
/** Value: "NIGHT" */
GTLR_EXTERN NSString * const kGTLRPhotosLibrary_ContentFilter_ExcludedContentCategories_Night;
/** Value: "NONE" */
GTLR_EXTERN NSString * const kGTLRPhotosLibrary_ContentFilter_ExcludedContentCategories_None;
/** Value: "PEOPLE" */
GTLR_EXTERN NSString * const kGTLRPhotosLibrary_ContentFilter_ExcludedContentCategories_People;
/** Value: "PERFORMANCES" */
GTLR_EXTERN NSString * const kGTLRPhotosLibrary_ContentFilter_ExcludedContentCategories_Performances;
/** Value: "PETS" */
GTLR_EXTERN NSString * const kGTLRPhotosLibrary_ContentFilter_ExcludedContentCategories_Pets;
/** Value: "RECEIPTS" */
GTLR_EXTERN NSString * const kGTLRPhotosLibrary_ContentFilter_ExcludedContentCategories_Receipts;
/** Value: "SCREENSHOTS" */
GTLR_EXTERN NSString * const kGTLRPhotosLibrary_ContentFilter_ExcludedContentCategories_Screenshots;
/** Value: "SELFIES" */
GTLR_EXTERN NSString * const kGTLRPhotosLibrary_ContentFilter_ExcludedContentCategories_Selfies;
/** Value: "SPORT" */
GTLR_EXTERN NSString * const kGTLRPhotosLibrary_ContentFilter_ExcludedContentCategories_Sport;
/** Value: "TRAVEL" */
GTLR_EXTERN NSString * const kGTLRPhotosLibrary_ContentFilter_ExcludedContentCategories_Travel;
/** Value: "UTILITY" */
GTLR_EXTERN NSString * const kGTLRPhotosLibrary_ContentFilter_ExcludedContentCategories_Utility;
/** Value: "WEDDINGS" */
GTLR_EXTERN NSString * const kGTLRPhotosLibrary_ContentFilter_ExcludedContentCategories_Weddings;
/** Value: "WHITEBOARDS" */
GTLR_EXTERN NSString * const kGTLRPhotosLibrary_ContentFilter_ExcludedContentCategories_Whiteboards;

// ----------------------------------------------------------------------------
// GTLRPhotosLibrary_ContentFilter.includedContentCategories

/** Value: "ANIMALS" */
GTLR_EXTERN NSString * const kGTLRPhotosLibrary_ContentFilter_IncludedContentCategories_Animals;
/** Value: "BIRTHDAYS" */
GTLR_EXTERN NSString * const kGTLRPhotosLibrary_ContentFilter_IncludedContentCategories_Birthdays;
/** Value: "CITYSCAPES" */
GTLR_EXTERN NSString * const kGTLRPhotosLibrary_ContentFilter_IncludedContentCategories_Cityscapes;
/** Value: "DOCUMENTS" */
GTLR_EXTERN NSString * const kGTLRPhotosLibrary_ContentFilter_IncludedContentCategories_Documents;
/** Value: "FOOD" */
GTLR_EXTERN NSString * const kGTLRPhotosLibrary_ContentFilter_IncludedContentCategories_Food;
/** Value: "LANDMARKS" */
GTLR_EXTERN NSString * const kGTLRPhotosLibrary_ContentFilter_IncludedContentCategories_Landmarks;
/** Value: "LANDSCAPES" */
GTLR_EXTERN NSString * const kGTLRPhotosLibrary_ContentFilter_IncludedContentCategories_Landscapes;
/** Value: "NIGHT" */
GTLR_EXTERN NSString * const kGTLRPhotosLibrary_ContentFilter_IncludedContentCategories_Night;
/** Value: "NONE" */
GTLR_EXTERN NSString * const kGTLRPhotosLibrary_ContentFilter_IncludedContentCategories_None;
/** Value: "PEOPLE" */
GTLR_EXTERN NSString * const kGTLRPhotosLibrary_ContentFilter_IncludedContentCategories_People;
/** Value: "PERFORMANCES" */
GTLR_EXTERN NSString * const kGTLRPhotosLibrary_ContentFilter_IncludedContentCategories_Performances;
/** Value: "PETS" */
GTLR_EXTERN NSString * const kGTLRPhotosLibrary_ContentFilter_IncludedContentCategories_Pets;
/** Value: "RECEIPTS" */
GTLR_EXTERN NSString * const kGTLRPhotosLibrary_ContentFilter_IncludedContentCategories_Receipts;
/** Value: "SCREENSHOTS" */
GTLR_EXTERN NSString * const kGTLRPhotosLibrary_ContentFilter_IncludedContentCategories_Screenshots;
/** Value: "SELFIES" */
GTLR_EXTERN NSString * const kGTLRPhotosLibrary_ContentFilter_IncludedContentCategories_Selfies;
/** Value: "SPORT" */
GTLR_EXTERN NSString * const kGTLRPhotosLibrary_ContentFilter_IncludedContentCategories_Sport;
/** Value: "TRAVEL" */
GTLR_EXTERN NSString * const kGTLRPhotosLibrary_ContentFilter_IncludedContentCategories_Travel;
/** Value: "UTILITY" */
GTLR_EXTERN NSString * const kGTLRPhotosLibrary_ContentFilter_IncludedContentCategories_Utility;
/** Value: "WEDDINGS" */
GTLR_EXTERN NSString * const kGTLRPhotosLibrary_ContentFilter_IncludedContentCategories_Weddings;
/** Value: "WHITEBOARDS" */
GTLR_EXTERN NSString * const kGTLRPhotosLibrary_ContentFilter_IncludedContentCategories_Whiteboards;

// ----------------------------------------------------------------------------
// GTLRPhotosLibrary_MediaTypeFilter.mediaTypes

/** Value: "ALL_MEDIA" */
GTLR_EXTERN NSString * const kGTLRPhotosLibrary_MediaTypeFilter_MediaTypes_AllMedia;
/** Value: "PHOTO" */
GTLR_EXTERN NSString * const kGTLRPhotosLibrary_MediaTypeFilter_MediaTypes_Photo;
/** Value: "VIDEO" */
GTLR_EXTERN NSString * const kGTLRPhotosLibrary_MediaTypeFilter_MediaTypes_Video;

// ----------------------------------------------------------------------------
// GTLRPhotosLibrary_Video.status

/**
 *  Something has gone wrong and the video has failed to process.
 *
 *  Value: "FAILED"
 */
GTLR_EXTERN NSString * const kGTLRPhotosLibrary_Video_Status_Failed;
/**
 *  Video is being processed. The user sees an icon for this
 *  video in the Google Photos app; however, it isn't playable yet.
 *
 *  Value: "PROCESSING"
 */
GTLR_EXTERN NSString * const kGTLRPhotosLibrary_Video_Status_Processing;
/**
 *  Video processing is complete and it is now ready for viewing.
 *
 *  Value: "READY"
 */
GTLR_EXTERN NSString * const kGTLRPhotosLibrary_Video_Status_Ready;
/**
 *  Video processing status is unknown.
 *
 *  Value: "UNSPECIFIED"
 */
GTLR_EXTERN NSString * const kGTLRPhotosLibrary_Video_Status_Unspecified;

/**
 *  Request to add an enrichment to a specific album at a specific position.
 */
@interface GTLRPhotosLibrary_AddEnrichmentToAlbumRequest : GTLRObject

/** The position in the album where the enrichment is to be inserted. */
@property(nonatomic, strong, nullable) GTLRPhotosLibrary_AlbumPosition *albumPosition;

/** The enrichment to be added. */
@property(nonatomic, strong, nullable) GTLRPhotosLibrary_NewEnrichmentItem *newEnrichmentItem NS_RETURNS_NOT_RETAINED;

@end


/**
 *  The enrichment item that's created.
 */
@interface GTLRPhotosLibrary_AddEnrichmentToAlbumResponse : GTLRObject

/** [Output only] Enrichment which was added. */
@property(nonatomic, strong, nullable) GTLRPhotosLibrary_EnrichmentItem *enrichmentItem;

@end


/**
 *  Representation of an album in Google Photos.
 *  Albums are containers for media items. If an album has been shared by the
 *  application, it contains an extra `shareInfo` property.
 */
@interface GTLRPhotosLibrary_Album : GTLRObject

/**
 *  [Output only] A URL to the cover photo's bytes. This shouldn't be used as
 *  is. Parameters should be appended to this URL before use. For example,
 *  `'=w2048-h1024'` sets the dimensions of
 *  the cover photo to have a width of 2048 px and height of 1024 px.
 */
@property(nonatomic, copy, nullable) NSString *coverPhotoBaseUrl;

/**
 *  [Output only] Identifier for the media item associated with the cover
 *  photo.
 */
@property(nonatomic, copy, nullable) NSString *coverPhotoMediaItemId;

/**
 *  [Ouput only] Identifier for the album. This is a persistent identifier that
 *  can be used between sessions to identify this album.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  [Output only] True if you can create media items in this album.
 *  This field is based on the scopes granted and permissions of the album. If
 *  the scopes are changed or permissions of the album are changed, this field
 *  is updated.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isWriteable;

/**
 *  [Output only] The number of media items in the album.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *mediaItemsCount;

/**
 *  [Output only] Google Photos URL for the album. The user needs to be signed
 *  in to their Google Photos account to access this link.
 */
@property(nonatomic, copy, nullable) NSString *productUrl;

/**
 *  [Output only] Information related to shared albums.
 *  This field is only populated if the album is a shared album, the
 *  developer created the album and the user has granted the
 *  `photoslibrary.sharing` scope.
 */
@property(nonatomic, strong, nullable) GTLRPhotosLibrary_ShareInfo *shareInfo;

/**
 *  Name of the album displayed to the user in their Google Photos account.
 *  This string shouldn't be more than 500 characters.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Specifies a position in an album.
 */
@interface GTLRPhotosLibrary_AlbumPosition : GTLRObject

/**
 *  Type of position, for a media or enrichment item.
 *
 *  Likely values:
 *    @arg @c kGTLRPhotosLibrary_AlbumPosition_Position_AfterEnrichmentItem
 *        After an enrichment item. (Value: "AFTER_ENRICHMENT_ITEM")
 *    @arg @c kGTLRPhotosLibrary_AlbumPosition_Position_AfterMediaItem After a
 *        media item. (Value: "AFTER_MEDIA_ITEM")
 *    @arg @c kGTLRPhotosLibrary_AlbumPosition_Position_FirstInAlbum At the
 *        beginning of the album. (Value: "FIRST_IN_ALBUM")
 *    @arg @c kGTLRPhotosLibrary_AlbumPosition_Position_LastInAlbum At the end
 *        of the album. (Value: "LAST_IN_ALBUM")
 *    @arg @c kGTLRPhotosLibrary_AlbumPosition_Position_PositionTypeUnspecified
 *        Default value if this enum isn't set. (Value:
 *        "POSITION_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *position;

/**
 *  The enrichment item to which the position is relative to.
 *  Only used when position type is AFTER_ENRICHMENT_ITEM.
 */
@property(nonatomic, copy, nullable) NSString *relativeEnrichmentItemId;

/**
 *  The media item to which the position is relative to.
 *  Only used when position type is AFTER_MEDIA_ITEM.
 */
@property(nonatomic, copy, nullable) NSString *relativeMediaItemId;

@end


/**
 *  Request to create one or more media items in a user's Google Photos library.
 *  If an `albumid` is specified, the media items are also added to that album.
 *  `albumPosition` is optional and can only be specified if an `albumId` is
 *  set.
 */
@interface GTLRPhotosLibrary_BatchCreateMediaItemsRequest : GTLRObject

/**
 *  Identifier of the album where the media items are added. The media items
 *  are also added to the user's library. This is an optional field.
 */
@property(nonatomic, copy, nullable) NSString *albumId;

/**
 *  Position in the album where the media items are added. If not
 *  specified, the media items are added to the end of the album (as per
 *  the default value, that is, `LAST_IN_ALBUM`). The request fails if this
 *  field is set and the `albumId` is not specified. The request will also fail
 *  if you set the field and are not the owner of the shared album.
 */
@property(nonatomic, strong, nullable) GTLRPhotosLibrary_AlbumPosition *albumPosition;

/** List of media items to be created. */
@property(nonatomic, strong, nullable) NSArray<GTLRPhotosLibrary_NewMediaItem *> *newMediaItems NS_RETURNS_NOT_RETAINED;

@end


/**
 *  List of media items created.
 */
@interface GTLRPhotosLibrary_BatchCreateMediaItemsResponse : GTLRObject

/** [Output only] List of media items created. */
@property(nonatomic, strong, nullable) NSArray<GTLRPhotosLibrary_NewMediaItemResult *> *newMediaItemResults NS_RETURNS_NOT_RETAINED;

@end


/**
 *  Response to retrieve a list of media items.
 */
@interface GTLRPhotosLibrary_BatchGetMediaItemsResponse : GTLRObject

/**
 *  [Output only] List of media items retrieved.
 *  Note that even if the call to BatchGetMediaItems succeeds, there may have
 *  been failures for some media items in the batch. These failures are
 *  indicated in each
 *  MediaItemResult.status.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPhotosLibrary_MediaItemResult *> *mediaItemResults;

@end


/**
 *  This filter allows you to return media items based on the content type.
 *  It's possible to specify a list of categories to include, and/or a list of
 *  categories to exclude. Within each list, the categories are combined with an
 *  OR. <p>
 *  The content filter `includedContentCategories`: [c1, c2, c3] would get media
 *  items that contain (c1 OR c2 OR c3). <p>
 *  The content filter `excludedContentCategories`: [c1, c2, c3] would NOT get
 *  media items that contain (c1 OR c2 OR c3). <p>
 *  You can also include some categories while excluding others, as in this
 *  example: `includedContentCategories`: [c1, c2], `excludedContentCategories`:
 *  [c3, c4] <p>
 *  The previous example would get media items that contain (c1 OR c2) AND NOT
 *  (c3 OR c4). A category that appears in `includedContentategories` must not
 *  appear in `excludedContentCategories`.
 */
@interface GTLRPhotosLibrary_ContentFilter : GTLRObject

/**
 *  The set of categories which are not to be included in the media item search
 *  results. The items in the set are ORed. There's a maximum of 10
 *  `excludedContentCategories` per request.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *excludedContentCategories;

/**
 *  The set of categories to be included in the media item search results.
 *  The items in the set are ORed. There's a maximum of 10
 *  `includedContentCategories` per request.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *includedContentCategories;

@end


/**
 *  Information about the user who added the media item. Note that this
 *  information is included only if the media item is within a shared album
 *  created by your app and you have the sharing scope.
 */
@interface GTLRPhotosLibrary_ContributorInfo : GTLRObject

/** Display name of the contributor. */
@property(nonatomic, copy, nullable) NSString *displayName;

/** URL to the profile picture of the contributor. */
@property(nonatomic, copy, nullable) NSString *profilePictureBaseUrl;

@end


/**
 *  Request to create an album in Google Photos.
 */
@interface GTLRPhotosLibrary_CreateAlbumRequest : GTLRObject

/** The album to be created. */
@property(nonatomic, strong, nullable) GTLRPhotosLibrary_Album *album;

@end


/**
 *  Represents a whole calendar date. The day may be 0 to represent a year and
 *  month where the day isn't significant, such as a whole calendar month. The
 *  month may be 0 to represent a a day and a year where the month isn't
 *  signficant, like when you want to specify the same day in every month of a
 *  year or a specific year. The year may be 0 to represent a month and day
 *  independent of year, like an anniversary date.
 */
@interface GTLRPhotosLibrary_Date : GTLRObject

/**
 *  Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if
 *  specifying a year/month where the day isn't significant.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *day;

/**
 *  Month of year. Must be from 1 to 12, or 0 if specifying a year without a
 *  month and day.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *month;

/**
 *  Year of date. Must be from 1 to 9999, or 0 if specifying a date without
 *  a year.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *year;

@end


/**
 *  This filter defines the allowed dates or date ranges for the media returned.
 *  It's possible to pick a set of specific dates and a set of date ranges.
 */
@interface GTLRPhotosLibrary_DateFilter : GTLRObject

/**
 *  List of dates that match the media items' creation date. A maximum of
 *  5 dates can be included per request.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPhotosLibrary_Date *> *dates;

/**
 *  List of dates ranges that match the media items' creation date. A
 *  maximum of 5 dates ranges can be included per request.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPhotosLibrary_DateRange *> *ranges;

@end


/**
 *  Defines a range of dates. Both dates must be of the same format. For more
 *  information, see <a href="#Date">Date</a>
 */
@interface GTLRPhotosLibrary_DateRange : GTLRObject

/**
 *  The end date (included as part of the range). It must be specified in the
 *  same format as the start date.
 */
@property(nonatomic, strong, nullable) GTLRPhotosLibrary_Date *endDate;

/**
 *  The start date (included as part of the range) in one of the formats
 *  described.
 */
@property(nonatomic, strong, nullable) GTLRPhotosLibrary_Date *startDate;

@end


/**
 *  An enrichment item.
 */
@interface GTLRPhotosLibrary_EnrichmentItem : GTLRObject

/**
 *  Identifier of the enrichment item.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

@end


/**
 *  Filters that can be applied to a media item search.
 *  If multiple filter options are specified, they're treated as AND with each
 *  other.
 */
@interface GTLRPhotosLibrary_Filters : GTLRObject

/** Filters the media items based on their content. */
@property(nonatomic, strong, nullable) GTLRPhotosLibrary_ContentFilter *contentFilter;

/** Filters the media items based on their creation date. */
@property(nonatomic, strong, nullable) GTLRPhotosLibrary_DateFilter *dateFilter;

/**
 *  If set, the results exclude media items that were not created by this app.
 *  Defaults to false (all media items are returned). This field is ignored if
 *  the photoslibrary.readonly.appcreateddata scope is used.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *excludeNonAppCreatedData;

/**
 *  If set, the results include media items that the user has archived.
 *  Defaults to false (archived media items aren't included).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *includeArchivedMedia;

/** Filters the media items based on the type of media. */
@property(nonatomic, strong, nullable) GTLRPhotosLibrary_MediaTypeFilter *mediaTypeFilter;

@end


/**
 *  Request to join a shared album on behalf of the user. This uses a shareToken
 *  which can be acquired via the shareAlbum or listSharedAlbums calls.
 */
@interface GTLRPhotosLibrary_JoinSharedAlbumRequest : GTLRObject

/** Token to join the shared album on behalf of the user. */
@property(nonatomic, copy, nullable) NSString *shareToken;

@end


/**
 *  Response to successfully joining the shared album on behalf of the user.
 */
@interface GTLRPhotosLibrary_JoinSharedAlbumResponse : GTLRObject

/** Shared album that the user has joined. */
@property(nonatomic, strong, nullable) GTLRPhotosLibrary_Album *album;

@end


/**
 *  An object representing a latitude/longitude pair. This is expressed as a
 *  pair
 *  of doubles representing degrees latitude and degrees longitude. Unless
 *  specified otherwise, this must conform to the
 *  <a href="http://www.unoosa.org/pdf/icg/2012/template/WGS_84.pdf">WGS84
 *  standard</a>. Values must be within normalized ranges.
 */
@interface GTLRPhotosLibrary_LatLng : GTLRObject

/**
 *  The latitude in degrees. It must be in the range [-90.0, +90.0].
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *latitude;

/**
 *  The longitude in degrees. It must be in the range [-180.0, +180.0].
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *longitude;

@end


/**
 *  Request to leave a shared album on behalf of the user. This uses a
 *  shareToken
 *  which can be acquired via the or listSharedAlbums or getAlbum calls.
 */
@interface GTLRPhotosLibrary_LeaveSharedAlbumRequest : GTLRObject

/** Token to leave the shared album on behalf of the user. */
@property(nonatomic, copy, nullable) NSString *shareToken;

@end


/**
 *  Response to successfully leaving the shared album on behalf of the user.
 */
@interface GTLRPhotosLibrary_LeaveSharedAlbumResponse : GTLRObject
@end


/**
 *  List of albums requested.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "albums" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRPhotosLibrary_ListAlbumsResponse : GTLRCollectionObject

/**
 *  [Output only] List of albums shown in the Albums tab of the user's Google
 *  Photos app.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPhotosLibrary_Album *> *albums;

/**
 *  [Output only] Token to use to get the next set of albums. Populated if
 *  there are more albums to retrieve for this request.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  List of all media items from the user's Google Photos library.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "mediaItems" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRPhotosLibrary_ListMediaItemsResponse : GTLRCollectionObject

/**
 *  [Output only] List of media items in the user's library.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPhotosLibrary_MediaItem *> *mediaItems;

/**
 *  [Output only] Token to use to get the next set of media items. Its presence
 *  is the only reliable indicator of more media items being available in the
 *  next request.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  List of shared albums requested.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "sharedAlbums" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRPhotosLibrary_ListSharedAlbumsResponse : GTLRCollectionObject

/**
 *  [Output only] Token to use to get the next set of shared albums. Populated
 *  if there are more shared albums to retrieve for this request.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  [Output only] List of shared albums.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPhotosLibrary_Album *> *sharedAlbums;

@end


/**
 *  Represents a physical location.
 */
@interface GTLRPhotosLibrary_Location : GTLRObject

/** Position of the location on the map. */
@property(nonatomic, strong, nullable) GTLRPhotosLibrary_LatLng *latlng;

/** Name of the location to be displayed. */
@property(nonatomic, copy, nullable) NSString *locationName;

@end


/**
 *  An enrichment containing a single location.
 */
@interface GTLRPhotosLibrary_LocationEnrichment : GTLRObject

/** Location for this enrichment item. */
@property(nonatomic, strong, nullable) GTLRPhotosLibrary_Location *location;

@end


/**
 *  An enrichment containing a map, showing origin and destination locations.
 */
@interface GTLRPhotosLibrary_MapEnrichment : GTLRObject

/** Destination location for this enrichemt item. */
@property(nonatomic, strong, nullable) GTLRPhotosLibrary_Location *destination;

/** Origin location for this enrichment item. */
@property(nonatomic, strong, nullable) GTLRPhotosLibrary_Location *origin;

@end


/**
 *  Representation of a media item (such as a photo or video) in Google Photos.
 */
@interface GTLRPhotosLibrary_MediaItem : GTLRObject

/**
 *  A URL to the media item's bytes. This shouldn't be used directly to access
 *  the media item. For example, `'=w2048-h1024'` will set the dimensions of a
 *  media item of type photo to have a width of 2048 px and height of 1024 px.
 */
@property(nonatomic, copy, nullable) NSString *baseUrl;

/** Information about the user who created this media item. */
@property(nonatomic, strong, nullable) GTLRPhotosLibrary_ContributorInfo *contributorInfo;

/**
 *  Description of the media item. This is shown to the user in the item's
 *  info section in the Google Photos app.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Filename of the media item. This is shown to the user in the item's info
 *  section in the Google Photos app.
 */
@property(nonatomic, copy, nullable) NSString *filename;

/**
 *  Identifier for the media item. This is a persistent identifier that can be
 *  used between sessions to identify this media item.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Metadata related to the media item, such as, height, width, or
 *  creation time.
 */
@property(nonatomic, strong, nullable) GTLRPhotosLibrary_MediaMetadata *mediaMetadata;

/** MIME type of the media item. For example, `image/jpeg`. */
@property(nonatomic, copy, nullable) NSString *mimeType;

/**
 *  Google Photos URL for the media item. This link is available to
 *  the user only if they're signed in.
 */
@property(nonatomic, copy, nullable) NSString *productUrl;

@end


/**
 *  Result of retrieving a media item.
 */
@interface GTLRPhotosLibrary_MediaItemResult : GTLRObject

/**
 *  Media item retrieved from the user's library. It's populated if no errors
 *  occurred and the media item was fetched successfully.
 */
@property(nonatomic, strong, nullable) GTLRPhotosLibrary_MediaItem *mediaItem;

/**
 *  If an error occurred while accessing this media item, this field
 *  is populated with information related to the error. For details regarding
 *  this field, see Status.
 */
@property(nonatomic, strong, nullable) GTLRPhotosLibrary_Status *status;

@end


/**
 *  Metadata for a media item.
 */
@interface GTLRPhotosLibrary_MediaMetadata : GTLRObject

/**
 *  Time when the media item was first created (not when it was uploaded to
 *  Google Photos).
 */
@property(nonatomic, strong, nullable) GTLRDateTime *creationTime;

/**
 *  Original height (in pixels) of the media item.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *height;

/** Metadata for a photo media type. */
@property(nonatomic, strong, nullable) GTLRPhotosLibrary_Photo *photo;

/** Metadata for a video media type. */
@property(nonatomic, strong, nullable) GTLRPhotosLibrary_Video *video;

/**
 *  Original width (in pixels) of the media item.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *width;

@end


/**
 *  This filter defines the type of media items to be returned, for example,
 *  videos or photos. All the specified media types are treated as an OR when
 *  used together.
 */
@interface GTLRPhotosLibrary_MediaTypeFilter : GTLRObject

/**
 *  The types of media items to be included. This field should be populated
 *  with only one media type. If you specify multiple media types, it results
 *  in an error.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *mediaTypes;

@end


/**
 *  A new enrichment item to be added to an album, used by the
 *  `albums.addEnrichment` call.
 */
@interface GTLRPhotosLibrary_NewEnrichmentItem : GTLRObject

/** Location to be added to the album. */
@property(nonatomic, strong, nullable) GTLRPhotosLibrary_LocationEnrichment *locationEnrichment;

/** Map to be added to the album. */
@property(nonatomic, strong, nullable) GTLRPhotosLibrary_MapEnrichment *mapEnrichment;

/** Text to be added to the album. */
@property(nonatomic, strong, nullable) GTLRPhotosLibrary_TextEnrichment *textEnrichment;

@end


/**
 *  New media item that's created in a user's Google Photos account.
 */
@interface GTLRPhotosLibrary_NewMediaItem : GTLRObject

/**
 *  Description of the media item. This will be shown to the user in the item's
 *  info section in the Google Photos app.
 *  This string shouldn't be more than 1000 characters.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** A new media item that has been uploaded via the included `uploadToken`. */
@property(nonatomic, strong, nullable) GTLRPhotosLibrary_SimpleMediaItem *simpleMediaItem;

@end


/**
 *  Result of creating a new media item.
 */
@interface GTLRPhotosLibrary_NewMediaItemResult : GTLRObject

/**
 *  Media item created with the upload token. It's populated if no errors
 *  occurred and the media item was created successfully.
 */
@property(nonatomic, strong, nullable) GTLRPhotosLibrary_MediaItem *mediaItem;

/**
 *  If an error occurred during the creation of this media item, this field
 *  is populated with information related to the error. For details regarding
 *  this field, see <a href="#Status">Status</a>.
 */
@property(nonatomic, strong, nullable) GTLRPhotosLibrary_Status *status;

/** The upload token used to create this new media item. */
@property(nonatomic, copy, nullable) NSString *uploadToken;

@end


/**
 *  Metadata that is specific to a photo, such as, ISO, focal length and
 *  exposure time. Some of these fields may be null or not included.
 */
@interface GTLRPhotosLibrary_Photo : GTLRObject

/**
 *  Aperture f number of the camera lens with which the photo was taken.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *apertureFNumber;

/** Brand of the camera with which the photo was taken. */
@property(nonatomic, copy, nullable) NSString *cameraMake;

/** Model of the camera with which the photo was taken. */
@property(nonatomic, copy, nullable) NSString *cameraModel;

/** Exposure time of the camera aperture when the photo was taken. */
@property(nonatomic, strong, nullable) GTLRDuration *exposureTime;

/**
 *  Focal length of the camera lens with which the photo was taken.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *focalLength;

/**
 *  ISO of the camera with which the photo was taken.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isoEquivalent;

@end


/**
 *  Request to search for media items in a user's library.
 *  If the album id is specified, this call will return the list of media items
 *  in the album. If neither filters nor album id are
 *  specified, this call will return all media items in a user's Google Photos
 *  library.
 *  If filters are specified, this call will return all media items in
 *  the user's library that fulfill the filter criteria.
 *  Filters and album id must not both be set, as this will result in an
 *  invalid request.
 */
@interface GTLRPhotosLibrary_SearchMediaItemsRequest : GTLRObject

/**
 *  Identifier of an album. If populated, lists all media items in
 *  specified album. Can't set in conjunction with any filters.
 */
@property(nonatomic, copy, nullable) NSString *albumId;

/**
 *  Filters to apply to the request. Can't be set in conjunction with an
 *  `albumId`.
 */
@property(nonatomic, strong, nullable) GTLRPhotosLibrary_Filters *filters;

/**
 *  Maximum number of media items to return in the response. The default number
 *  of media items to return at a time is 25. The maximum
 *  `pageSize` is 100.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pageSize;

/**
 *  A continuation token to get the next page of the results. Adding this to
 *  the request returns the rows after the `pageToken`. The `pageToken` should
 *  be the value returned in the `nextPageToken` parameter in the response to
 *  the `searchMediaItems` request.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

@end


/**
 *  List of media items that match the search parameters.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "mediaItems" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRPhotosLibrary_SearchMediaItemsResponse : GTLRCollectionObject

/**
 *  [Output only] List of media items that match the search parameters.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPhotosLibrary_MediaItem *> *mediaItems;

/**
 *  [Output only] Use this token to get the next set of media items. Its
 *  presence is the only reliable indicator of more media items being available
 *  in the next request.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Request to make an album shared in Google Photos.
 */
@interface GTLRPhotosLibrary_ShareAlbumRequest : GTLRObject

/** Options to be set when converting the album to a shared album. */
@property(nonatomic, strong, nullable) GTLRPhotosLibrary_SharedAlbumOptions *sharedAlbumOptions;

@end


/**
 *  Response to successfully sharing an album.
 */
@interface GTLRPhotosLibrary_ShareAlbumResponse : GTLRObject

/** [Output only] Information about the shared album. */
@property(nonatomic, strong, nullable) GTLRPhotosLibrary_ShareInfo *shareInfo;

@end


/**
 *  Options that control the sharing of an album.
 */
@interface GTLRPhotosLibrary_SharedAlbumOptions : GTLRObject

/**
 *  True if the shared album allows collaborators (users who have joined
 *  the album) to add media items to it. Defaults to false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isCollaborative;

/**
 *  True if the shared album allows the owner and the collaborators (users
 *  who have joined the album) to add comments to the album. Defaults to false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isCommentable;

@end


/**
 *  Information about albums that are shared. This information is only included
 *  if you created the album, it is shared and you have the sharing scope.
 */
@interface GTLRPhotosLibrary_ShareInfo : GTLRObject

/**
 *  True if the user has joined the album. This is always true for the owner
 *  of the shared album.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isJoined;

/**
 *  A link to the album that's now shared on the Google Photos website and app.
 *  Anyone with the link can access this shared album and see all of the items
 *  present in the album.
 */
@property(nonatomic, copy, nullable) NSString *shareableUrl;

/** Options that control the sharing of an album. */
@property(nonatomic, strong, nullable) GTLRPhotosLibrary_SharedAlbumOptions *sharedAlbumOptions;

/**
 *  A token that can be used by other users to join this shared album via the
 *  API.
 */
@property(nonatomic, copy, nullable) NSString *shareToken;

@end


/**
 *  A simple media item to be created in Google Photos via an upload token.
 */
@interface GTLRPhotosLibrary_SimpleMediaItem : GTLRObject

/** Token identifying the media bytes that have been uploaded to Google. */
@property(nonatomic, copy, nullable) NSString *uploadToken;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). The error model is designed to be:
 *  - Simple to use and understand for most users
 *  - Flexible enough to meet unexpected needs
 *  # Overview
 *  The `Status` message contains three pieces of data: error code, error
 *  message, and error details. The error code should be an enum value of
 *  google.rpc.Code, but it may accept additional error codes if needed. The
 *  error message should be a developer-facing English message that helps
 *  developers *understand* and *resolve* the error. If a localized user-facing
 *  error message is needed, put the localized message in the error details or
 *  localize it in the client. The optional error details may contain arbitrary
 *  information about the error. There is a predefined set of error detail types
 *  in the package `google.rpc` that can be used for common error conditions.
 *  # Language mapping
 *  The `Status` message is the logical representation of the error model, but
 *  it
 *  is not necessarily the actual wire format. When the `Status` message is
 *  exposed in different client libraries and different wire protocols, it can
 *  be
 *  mapped differently. For example, it will likely be mapped to some exceptions
 *  in Java, but more likely mapped to some error codes in C.
 *  # Other uses
 *  The error model and the `Status` message can be used in a variety of
 *  environments, either with or without APIs, to provide a
 *  consistent developer experience across different environments.
 *  Example uses of this error model include:
 *  - Partial errors. If a service needs to return partial errors to the client,
 *  it may embed the `Status` in the normal response to indicate the partial
 *  errors.
 *  - Workflow errors. A typical workflow has multiple steps. Each step may
 *  have a `Status` message for error reporting.
 *  - Batch operations. If a client uses batch request and batch response, the
 *  `Status` message should be used directly inside batch response, one for
 *  each error sub-response.
 *  - Asynchronous operations. If an API call embeds asynchronous operation
 *  results in its response, the status of those operations should be
 *  represented directly using the `Status` message.
 *  - Logging. If some API errors are stored in logs, the message `Status` could
 *  be used directly after any stripping needed for security/privacy reasons.
 */
@interface GTLRPhotosLibrary_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRPhotosLibrary_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRPhotosLibrary_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRPhotosLibrary_Status_Details_Item : GTLRObject
@end


/**
 *  An enrichment containing text.
 */
@interface GTLRPhotosLibrary_TextEnrichment : GTLRObject

/** Text for this enrichment item. */
@property(nonatomic, copy, nullable) NSString *text;

@end


/**
 *  Request to unshare a shared album in Google Photos.
 */
@interface GTLRPhotosLibrary_UnshareAlbumRequest : GTLRObject
@end


/**
 *  Response of a successful unshare of a shared album.
 */
@interface GTLRPhotosLibrary_UnshareAlbumResponse : GTLRObject
@end


/**
 *  Metadata that is specific to a video, for example, fps and processing
 *  status.
 *  Some of these fields may be null or not included.
 */
@interface GTLRPhotosLibrary_Video : GTLRObject

/** Brand of the camera with which the video was taken. */
@property(nonatomic, copy, nullable) NSString *cameraMake;

/** Model of the camera with which the video was taken. */
@property(nonatomic, copy, nullable) NSString *cameraModel;

/**
 *  Frame rate of the video.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *fps;

/**
 *  Processing status of the video.
 *
 *  Likely values:
 *    @arg @c kGTLRPhotosLibrary_Video_Status_Failed Something has gone wrong
 *        and the video has failed to process. (Value: "FAILED")
 *    @arg @c kGTLRPhotosLibrary_Video_Status_Processing Video is being
 *        processed. The user sees an icon for this
 *        video in the Google Photos app; however, it isn't playable yet.
 *        (Value: "PROCESSING")
 *    @arg @c kGTLRPhotosLibrary_Video_Status_Ready Video processing is complete
 *        and it is now ready for viewing. (Value: "READY")
 *    @arg @c kGTLRPhotosLibrary_Video_Status_Unspecified Video processing
 *        status is unknown. (Value: "UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *status;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
